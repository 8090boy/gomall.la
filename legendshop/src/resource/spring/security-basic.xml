<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<http pattern="/login" security="none" />

	<http use-expressions="true" access-denied-page="/login"
		entry-point-ref="authenticationProcessingFilterEntryPoint">
		<intercept-url pattern="/p/**" access="isAuthenticated()" />
		<intercept-url pattern="/myClub" access="isAuthenticated()" />
		<intercept-url pattern="/admin/system/**"
			access="hasAnyRole('ROLE_SYSTEM', 'ROLE_SUPERVISOR')" />
		<intercept-url pattern="/admin/member/**" access="hasRole('ROLE_SUPERVISOR')" />
		<intercept-url pattern="/admin/sales/**"
			access="hasAnyRole('ROLE_ADMIN', 'ROLE_SALE', 'ROLE_SUPERVISOR')" />
		<intercept-url pattern="/admin/product/**"
			access="hasAnyRole('ROLE_ADMIN', 'ROLE_SUPPLIER', 'ROLE_SUPERVISOR')" />
		<intercept-url pattern="/admin/**"
			access="hasAnyRole('ROLE_ADMIN', 'ROLE_SUPPLIER',  'ROLE_SALE', 'ROLE_SUPERVISOR')" />
		<intercept-url pattern="/**" access="permitAll" />

		<session-management session-fixation-protection="none" />

		<custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER" />
		<custom-filter ref="validateCodeAuthenticationFilter"
			position="FORM_LOGIN_FILTER" />
		<custom-filter ref="_logoutFilter" position="LOGOUT_FILTER" />
	</http>

	<beans:bean id="sas"
		class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<beans:constructor-arg name="sessionRegistry"
			ref="sessionRegistry" />
		<beans:property name="maximumSessions" value="1" />
	</beans:bean>

	<beans:bean id="concurrencyFilter"
		class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:property name="sessionRegistry" ref="sessionRegistry" />
		<beans:property name="expiredUrl" value="/login?error=2" />
	</beans:bean>

	<beans:bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />

	<beans:bean id="validateCodeAuthenticationFilter"
		class="com.legendshop.business.handler.ValidateCodeUsernamePasswordAuthenticationFilter">
		<beans:property name="filterProcessesUrl" value="/p/j_spring_security_check"></beans:property>
		<beans:property name="authenticationSuccessHandler"
			ref="loginLogAuthenticationSuccessHandler"></beans:property>
		<beans:property name="authenticationFailureHandler"
			ref="simpleUrlAuthenticationFailureHandler"></beans:property>
		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
		<beans:property name="sessionAuthenticationStrategy"
			ref="sas"></beans:property>
	</beans:bean>

	<beans:bean id="authenticationProcessingFilterEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login"></beans:property>
	</beans:bean>

	<beans:bean id="_logoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<beans:constructor-arg index="0" value="/" />
		<beans:constructor-arg index="1">
			<beans:list>
				<beans:bean
					class="com.legendshop.business.helper.SecurityContextLogoutHandlerImpl" />
			</beans:list>
		</beans:constructor-arg>
		<beans:property name="filterProcessesUrl" value="/p/logout" />
	</beans:bean>

	<!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="authService">
			<!-- 如果用户的密码采用加密的话，可以加点“盐” <password-encoder hash="md5" /> -->
			<password-encoder ref="passwordEncoder">
				<salt-source user-property="username" />
			</password-encoder>
		</authentication-provider>
	</authentication-manager>

	<!-- 使用Md5算法加密 -->
	<beans:bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder">
		<beans:property name="encodeHashAsBase64" value="false"></beans:property>
	</beans:bean>
	<!-- <beans:bean id="ssoPasswordEncoder" class="com.legendshop.core.sso.SSOPasswordEncoder" 
		/> -->

	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<beans:property name="allowIfAllAbstainDecisions"
			value="false" />
		<beans:property name="decisionVoters">
			<beans:list>
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:bean
					class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="loginService"
		class="com.legendshop.business.newservice.LoginServiceImpl" parent="validateCodeAuthenticationFilter">
	</beans:bean>

</beans:beans>
