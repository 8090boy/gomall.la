<project name="LegendShop" default="build-all-jar-jocky">
	<property file="build.properties" />
	<property name="dist.dir" value="${tmp.dir}/dist" />
	<property name="war.file" value="${dist.dir}/${app.name}.war" />
	<property name="ear.file" value="${dist.dir}/${app.name}.ear" />
	<property name="jar.name" value="${release.root}/${app.name}.jar" />
	<property name="jocky.name" value="${release.root}/${app.name}.jar" />
	<property name="dest.dir" value="../${web.name}" />
	
	<tstamp prefix="build-info">
		<format property="current-date" pattern="d-MMMM-yyyy" locale="en" />
		<format property="current-time" pattern="hh:mm:ss a z" locale="en" />
		<format property="year-month-day" pattern="yyyy-MM-dd" locale="en" />
	</tstamp>

	<path id="project.classpath">
			<path refid="base.path" />
			<path refid="dependency.classpath" />
		</path>

		<path id="base.path">
			<fileset dir="../lib">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="../jeelib">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<path id="dependency.classpath">
			<fileset dir="${release.root}">
				<include name="*.jar" />
			</fileset>
		</path>
	
	<!-- ===================================
				 显示可选任务，并按用户的选择执行任务
				 ==================================== -->
		<target name="usage" description="显示可选任务">
			<echo message="${app.name} Build 文件"/>
			<echo message="------------------------------------------------------"/>
			<echo message="可选Target:"/>
			<echo message=""/>
			<echo message="compile      --&gt; 编译系统并拷贝相应的属性文件"/>
			<echo message="clean        --&gt; 清除文件"/>
			<echo message="jar          --&gt; 编译客户端jar包"/>
			<echo message="jar-jocky          --&gt; 混淆编译客户端jar包"/>
			<input message="请选择一个Target"
				   validargs="compile,clean,jar,jar-jocky"
				   addproperty="ant.task"/>
			<antcall target="${ant.task}"/>
		</target>

	<!-- 系统初始化 -->
	<target name="init">
		<echo>系统初始化,建立相应的目录</echo>
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${class.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>
	
	<!-- 清除文件 -->
	<target name="clean" description="Deletes the build and distribution directories">
		<delete dir="${dist.dir}" />
		<delete dir="${class.dir}" />
	</target>
	
	<!-- 检查环境 -->
	<target name="check-env">
		<echo>检查JDK版本为5.0</echo>
		<fail message="Must Set the JAVA_HOME to JDK5.0">
			<condition>
				<not>
					<equals arg1="${ant.java.version}" arg2="1.5"/>
				</not>
			</condition>
		</fail>
	</target>
	
	 <!--   编译系统并拷贝相应的属性文件 -->
	<target name="compile" depends="init" description="mkdir and compile file into class.dir">
		<echo>从${src.dir}编译代码到目录${class.dir}并拷贝相关的属性文件</echo>
		<javac srcdir="${src.dir}" destdir="${class.dir}" encoding="utf-8" debug="on" source="1.5">
			<classpath refid="project.classpath" />
		</javac>
		<!-- 拷贝代码目录下的属性文件 -->
		<copy todir="${class.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}" includes="${config_file.type}" />
		</copy>
		<!-- 拷贝resource目录下的属性文件 -->
		<copy todir="${class.dir}" preservelastmodified="true">
			<fileset dir="${resource.dir}" includes="**/*" />
		</copy>
	</target>
	
	<!--编译客户端包  -->
	<target name="jar" depends="compile" description="--> tarapp_client">
		<echo>编译客户端jar包：${jar.name} </echo>
		<jar destfile="${jar.name}">
			<fileset dir="${class.dir}" includes="com/legendshop/**/*.class,**/*.xml" excludes="**/test/**/*.class"/>
			<fileset dir="${resource.dir}" includes="**/*" />
			<manifest>
				<attribute name="Built-By" value="${builder}" />
				<attribute name="Built-On" value="${build-info.current-date}" />
				<attribute name="Built-At" value="${build-info.current-time}" />
			</manifest>
		</jar>
	</target>
	
	<!--编译客户端包  -->
	<target name="jar-jocky">
		<echo>编译客户端jar包：${jar.name} </echo>
		<delete file="${jocky.name}" />
		<jar destfile="${jocky.name}">
			<fileset dir="${jocky.bin}" includes="com/legendshop/**/*.class,org/**/*.class" excludes="**/test/**/*.class"/>
			<fileset dir="${src.dir}" includes="${config_file.type}" />
			<fileset dir="${resource.dir}" includes="**/*" />
		</jar>
	</target>
	
	<target name="build-all-jar-jocky">
	    <subant>
	    	<target name="build-jar" />
	    	<fileset dir="../../" includes="**/build-jar.xml"></fileset>
	    </subant>
	</target>
	
</project>

